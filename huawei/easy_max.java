package huawei;

import java.util.*;

/**
 * easy_max
 *
 * @since 2020-06-04
 */
public class easy_max {

    public static int[][] matrix;
    public static boolean[] flags;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int size = in.nextInt();

        flags = new boolean[size];
        matrix = new int[size][size];
        for (int i = 0; i < size; i++) {
            flags[i] = false;
            for (int j = 0; j < size; j++) {
                matrix[i][j] = in.nextInt();
            }
        }
        in.close();

        System.out.println(dfs(size, 0, 0));

        // 剪枝关键: 不必往回遍历
        // 剪枝关键: 如果有5个数, 11100和00011是等价的
        // 考虑可否设置为动态规划? 
    }

    public static int dfs(int size, int distSum, int nextIdx) {
        flags[nextIdx] = true;
        // calculate num
        for (int j = 0; j < size; j++) {
            if (flags[j]) {
                distSum -= matrix[j][nextIdx];
            } else {
                distSum += matrix[nextIdx][j];
            }
        }

        int maxSum = distSum;
        for (int i = nextIdx + 1; i < size; i++) {
            int value = dfs(size, distSum, i);
            if (value > maxSum) {
                maxSum = value;
            }
        }

        flags[nextIdx] = false;
        return maxSum;
    }

    // 19
    // 0 158396 99462 94264 22156 106883 158430 165972 127454 58572 46201 196005 180514 137682 20010 18076 42098 74722 84668
    // 158396 0 13320 193889 166847 137913 33760 49869 140145 40879 71172 75309 140186 109685 49762 1746 189602 156545 61591
    // 99462 13320 0 39126 159250 101243 86358 113668 56379 129356 49613 79553 111159 135272 187112 22819 153172 86645 3119
    // 94264 193889 39126 0 134001 177946 20730 154388 44145 157184 178131 4889 182908 97630 131537 163000 168816 24226 56548
    // 22156 166847 159250 134001 0 56145 30924 68800 145238 135266 68646 57657 33097 181261 85860 38094 185212 84305 20409
    // 106883 137913 101243 177946 56145 0 25208 32826 21562 87570 114771 159784 117677 55220 40599 174988 128784 4509 171350
    // 158430 33760 86358 20730 30924 25208 0 37983 173367 164651 73458 185104 10255 49341 160894 51850 188225 130313 191708
    // 165972 49869 113668 154388 68800 32826 37983 0 20842 136457 163938 29865 188298 138421 189117 127813 67170 54530 136044
    // 127454 140145 56379 44145 145238 21562 173367 20842 0 140107 99277 63958 173079 64092 138651 138566 164053 141762 27212
    // 58572 40879 129356 157184 135266 87570 164651 136457 140107 0 76553 63993 122342 79384 15612 134252 85278 42496 8428
    // 46201 71172 49613 178131 68646 114771 73458 163938 99277 76553 0 171470 65943 26000 135848 32487 40020 29902 160761
    // 196005 75309 79553 4889 57657 159784 185104 29865 63958 63993 171470 0 14011 169907 112819 134683 44489 94415 56630
    // 180514 140186 111159 182908 33097 117677 10255 188298 173079 122342 65943 14011 0 22446 166136 100035 104978 44297 57968
    // 137682 109685 135272 97630 181261 55220 49341 138421 64092 79384 26000 169907 22446 0 25414 181498 172389 71591 30151
    // 20010 49762 187112 131537 85860 40599 160894 189117 138651 15612 135848 112819 166136 25414 0 142986 104344 138238 22390
    // 18076 1746 22819 163000 38094 174988 51850 127813 138566 134252 32487 134683 100035 181498 142986 0 36729 75383 145800
    // 42098 189602 153172 168816 185212 128784 188225 67170 164053 85278 40020 44489 104978 172389 104344 36729 0 131045 41295
    // 74722 156545 86645 24226 84305 4509 130313 54530 141762 42496 29902 94415 44297 71591 138238 75383 131045 0 98061
    // 84668 61591 3119 56548 20409 171350 191708 136044 27212 8428 160761 56630 57968 30151 22390 145800 41295 98061 0
    // res: 10134286

}
